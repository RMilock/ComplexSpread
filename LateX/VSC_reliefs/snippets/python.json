{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	//my snippets
	"watts-strogatz": {
			"prefix": "conn_watts",
		 	"body": [
		 		"N, D, p = 30, 4, 0.1", 
				"G = nx.connected_watts_strogatz_graph(N,D,p)",
		 		"$0"
		 	],
		 	"description": "create a connected Watts-Strogatz graph"
		 },
	"pylab": {
		"prefix": "pylabimp",
		 "body": [
			 "import matplotlib.pylab as plt",
			 "$2"
		 ],
		 "description": "import pylab"
	 },
	 "numpy": {
		"prefix": "npimp",
		 "body": [
			 "import numpy as np",
			 "$2"
		 ],
		 "description": "import numpy"
	 },
	 "nximp": {
		"prefix": "nximp",
		 "body": [
			 "import networkx as nx",
			 "$2"
		 ],
		 "description": "import networkx"
	 },
	 "print": {
		"prefix": "prf",
		 "body": [
			 "print(f'$1: {$1}',$2)",
			 "$0"
		 ],
		 "description": "print"
	 },
	"nx.draw_circular": {
	"prefix": "sn_draw_circular",
	"body": [
		"fig, ax = plt.subplots(figsize = (14,10))",
		"nx.draw_circular(G, ax = ax, with_labels = True, width = 1, node_size = 1e3, alpha = 0.9, node_color = \"orange\", font_size = 10)",
		"plt.show()",
		"plt.close()",
		"$2"
	],
	"description": "draw a graph"
	},
	"fquotes": {
	"prefix": "f''",
		"body": [
			"f'$1: {$1}',$2",
		],
		"description": "fquotes"
	},
	"rhu":{
	"prefix": "rhu",
		"body": [
			"def rhu(n, decimals=0, integer = False): #round_half_up",
			"\timport math",
			"\tmultiplier = 10 ** decimals",
			"\tres = math.floor(n*multiplier + 0.5) / multiplier",
			"\tif integer: return int(res)",
			"\treturn res",
			"$0"
		],
		"description": "fquotes"
	},
	"timeit":{
		"prefix": "timeit",
			"body": [
				"import datetime as dt",
				"start = dt.datetime.now()",
				"$1",
				"print(f'The total time of $1 is: {dt.datetime.now()-start}')",
				"$0",
			],
			"description": "timeit"
		},
	
}